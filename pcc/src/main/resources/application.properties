server.port = 8083
B1URL = https://localhost:8081/paymentRequest
B2URL = https://localhost:8082/paymentRequest
B2Sync = https://localhost:8082/getIssuerTransactions
B1N = 111111
B2N = 222222
#sertifikat
server.ssl.key-alias=pcc-app
server.ssl.key-store-type=JKS
server.ssl.key-store-password=pccapppass
server.ssl.key-store=classpath:pcc-app.jks
security.require-ssl=true
spring.jpa.properties.hibernate.hbm2ddl.import_files=import.sql

spring.datasource.driver-class-name=org.h2.Driver
spring.datasource.url=jdbc:h2:mem:test;DB_CLOSE_ON_EXIT=FALSE;MV_STORE=FALSE;MVCC=FALSE;DB_CLOSE_DELAY=-1;DATABASE_TO_UPPER=false
spring.datasource.username=sa
spring.datasource.password=
#Ukljucivanje konzole
spring.h2.console.enabled=true
#Putanja na kojoj ce konzola biti dostupna
spring.h2.console.path=/h2-console
#korisno ako je konekcija dugo u idle stanju
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1
#JPA-Hibernate - prikazuje SQL upite
spring.jpa.show-sql = false
#kreira tabele na osnovu anotacija @Entity i kada aplikacija zavrsi
#sa radom dropuje ih
spring.jpa.hibernate.ddl-auto = create-drop
#bira najbolje konvencije imenovanja za tabele i polja u bazi
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy
#optimizacija za h2 upite
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.H2Dialect
#konekcija na bazu je jdbc:h2:mem:myDb
#spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
#spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
#spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql
